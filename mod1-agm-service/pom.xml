<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.5.6</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <groupId>tld.yggdrasill.contingency.guard</groupId>
  <artifactId>mod1-agm-service</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>autonomous-grid-manager</name>
  <description>Sample Kafka/Camunda system :: agm-service</description>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.target>17</maven.compiler.target>
    <maven.compiler.source>17</maven.compiler.source>

    <spring-cloud.version>2020.0.4</spring-cloud.version>
    <modelmapper.version>2.4.5</modelmapper.version>
    <problem-spring-web.version>0.27.0</problem-spring-web.version>
    <elastic-apm-agent.version>1.28.4</elastic-apm-agent.version>
    <lockback-ecs-encoder.version>1.3.0</lockback-ecs-encoder.version>
    <logstash-logback-encoder.version>7.0.1</logstash-logback-encoder.version>

    <camunda.version>7.16.0</camunda.version>
    <camunda-mockito.version>5.16.0</camunda-mockito.version>
    <camunda-assert.version>12.0.0</camunda-assert.version>
    <camunda-spin.version>1.6.7</camunda-spin.version>
    <camunda-scenario.version>2.0.0.alpha.2</camunda-scenario.version>
    <postgresql.version>42.3.3</postgresql.version>

    <lombok.version>1.18.22</lombok.version>
    <common-text.version>1.9</common-text.version>

    <!-- tests -->
    <junit-jupiter.version>5.8.2</junit-jupiter.version>
    <testcontainers-spring-boot.version>2.0.19</testcontainers-spring-boot.version>
<!--    <testcontainers.version>1.15.2</testcontainers.version>-->

    <chaos-monkey-spring-boot.version>2.5.4</chaos-monkey-spring-boot.version>
    <archunit.version>0.22.0</archunit.version>

    <!-- plugins -->
    <maven-gpg-plugin.version>3.0.1</maven-gpg-plugin.version>
    <git-commit-id.version>4.9.9</git-commit-id.version>
    <docker-maven-plugin.version>0.37.0</docker-maven-plugin.version>
    <error-prone.version>2.2.0</error-prone.version>
    <jib.maven-plugin-version>3.2.1</jib.maven-plugin-version>

    <!-- container -->
    <elastic-apm-agent.lib>/app/libs/ext</elastic-apm-agent.lib>
    <exec.mainClass>tld.yggdrasill.services.agm.AGMApplication</exec.mainClass>

    <!-- GPG -->
<!--    <gpg.keyname>2AC91B9523D4A0CF</gpg.keyname>-->
    <gpg.defaultKeyring>false</gpg.defaultKeyring>
    <gpg.useagent>true</gpg.useagent>
    <gpg.lockMode>never</gpg.lockMode>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>${spring-cloud.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>com.playtika.testcontainers</groupId>
        <artifactId>testcontainers-spring-boot-bom</artifactId>
        <version>${testcontainers-spring-boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

<!--
      <dependency>
        <groupId>org.testcontainers</groupId>
        <artifactId>testcontainers-bom</artifactId>
        <version>${testcontainers.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
-->

      <dependency>
        <groupId>org.camunda.bpm</groupId>
        <artifactId>camunda-bom</artifactId>
        <scope>import</scope>
        <type>pom</type>
        <version>${camunda.version}</version>
      </dependency>
      <dependency>
        <groupId>org.camunda.bpm.dmn</groupId>
        <artifactId>camunda-engine-dmn-bom</artifactId>
        <version>${camunda.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.camunda.spin</groupId>
        <artifactId>camunda-spin-bom</artifactId>
        <version>${camunda-spin.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- generic spring-boot support -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-config</artifactId>
    </dependency>

    <!-- kubernetes support -->
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-kubernetes-client-config</artifactId>
    </dependency>

    <!-- monitoring en metrics -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>io.github.openfeign</groupId>
      <artifactId>feign-micrometer</artifactId>
      <version>11.8</version>
    </dependency>
<!--
    disable in combination with elastic dependency (adds field traceId)
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-sleuth</artifactId>
    </dependency>
-->
    <dependency>
      <groupId>co.elastic.apm</groupId>
      <artifactId>apm-agent-api</artifactId>
      <version>${elastic-apm-agent.version}</version>
    </dependency>

    <!-- rest model mappers -->
    <dependency>
      <groupId>org.modelmapper</groupId>
      <artifactId>modelmapper</artifactId>
      <version>${modelmapper.version}</version>
    </dependency>
    <dependency>
      <groupId>org.modelmapper.extensions</groupId>
      <artifactId>modelmapper-spring</artifactId>
      <version>${modelmapper.version}</version>
    </dependency>


    <!-- REST API error handling -->
    <dependency>
      <groupId>org.zalando</groupId>
      <artifactId>problem-spring-web-starter</artifactId>
      <version>${problem-spring-web.version}</version>
    </dependency>

    <!-- camunda starters & support -->
    <dependency>
      <groupId>org.camunda.bpm.springboot</groupId>
      <artifactId>camunda-bpm-spring-boot-starter</artifactId>
    </dependency>
    <dependency>
      <groupId>org.camunda.bpm.springboot</groupId>
      <artifactId>camunda-bpm-spring-boot-starter-webapp</artifactId>
    </dependency>
    <dependency>
      <groupId>org.camunda.bpm.springboot</groupId>
      <artifactId>camunda-bpm-spring-boot-starter-rest</artifactId>
    </dependency>
    <dependency>
      <groupId>org.camunda.bpm</groupId>
      <artifactId>camunda-engine-spring</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-jdbc</artifactId>
    </dependency>
    <dependency>
      <groupId>org.camunda.spin</groupId>
      <artifactId>camunda-spin-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.camunda.spin</groupId>
      <artifactId>camunda-spin-dataformat-all</artifactId>
    </dependency>
    <dependency>
      <groupId>org.camunda.bpm</groupId>
      <artifactId>camunda-engine-plugin-spin</artifactId>
    </dependency>
    <dependency>
      <groupId>org.camunda.spin</groupId>
      <artifactId>camunda-spin-dataformat-json-jackson</artifactId>
    </dependency>

    <!-- persistence dependencies -->
 		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>compile</scope>
		</dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>${postgresql.version}</version>
    </dependency>

    <!-- connectivity -->
    <dependency>
      <groupId>org.springframework.kafka</groupId>
      <artifactId>spring-kafka</artifactId>
    </dependency>
    <dependency>
      <groupId>tld.yggdrasill.contingency.guard</groupId>
      <artifactId>mod1-cgs-api</artifactId>
      <version>0.0.1-SNAPSHOT</version>
    </dependency>

    <!-- service discovery -->
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-openfeign</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-openfeign-core</artifactId>
    </dependency>

    <!-- logging to logstash, fluentd -->
    <dependency>
      <groupId>net.logstash.logback</groupId>
      <artifactId>logstash-logback-encoder</artifactId>
      <version>${logstash-logback-encoder.version}</version>
    </dependency>
    <dependency>
      <groupId>co.elastic.logging</groupId>
      <artifactId>logback-ecs-encoder</artifactId>
      <version>${lockback-ecs-encoder.version}</version>
    </dependency>

    <!-- miscellaneous/build dependencies -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <!-- only needed at compile time -->
      <scope>compile</scope>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>

    <!-- the javax and xml bindings are necessary to run camunda in spring-boot 2.5.x -->
    <dependency>
      <groupId>javax.annotation</groupId>
      <artifactId>javax.annotation-api</artifactId>
      <version>1.3.2</version>
    </dependency>
    <dependency>
      <groupId>com.sun.xml.bind</groupId>
      <artifactId>jaxb-impl</artifactId>
      <version>2.3.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-text</artifactId>
      <version>${common-text.version}</version>
      <scope>compile</scope>
    </dependency>

    <!-- tests -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
      <!-- exclude junit 4 -->
      <exclusions>
        <exclusion>
          <groupId>org.junit.vintage</groupId>
          <artifactId>junit-vintage-engine</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.camunda.bpm.springboot</groupId>
      <artifactId>camunda-bpm-spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.kafka</groupId>
      <artifactId>spring-kafka-test</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- junit 5 -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit-jupiter.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- test containers -->
    <!-- JUnit 5 integration with testcontainer -->
<!--
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>kafka</artifactId>
      <scope>test</scope>
    </dependency>
-->
    <dependency>
      <groupId>com.playtika.testcontainers</groupId>
      <artifactId>embedded-kafka</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.playtika.testcontainers</groupId>
      <artifactId>embedded-postgresql</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- validation, assertion & tooling -->
    <dependency>
      <groupId>org.camunda.bpm.extension</groupId>
      <artifactId>camunda-bpm-junit5</artifactId>
      <version>1.0.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.camunda.bpm.extension.mockito</groupId>
      <artifactId>camunda-bpm-mockito</artifactId>
      <version>${camunda-mockito.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.camunda.bpm.assert</groupId>
      <artifactId>camunda-bpm-assert</artifactId>
      <version>${camunda-assert.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.camunda.bpm.extension.scenario</groupId>
      <artifactId>camunda-platform-scenario-runner</artifactId>
      <version>${camunda-scenario.version}</version>
      <scope>test</scope>
    </dependency>
    <!--
        <dependency>
          <groupId>org.camunda.bpm.extension</groupId>
          <artifactId>camunda-bpm-process-test-coverage</artifactId>
          <version>0.3.2</version>
          <scope>test</scope>
        </dependency>
    -->
    <dependency>
      <groupId>com.github.tomakehurst</groupId>
      <artifactId>wiremock-jre8</artifactId>
      <version>2.32.0</version>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.awaitility</groupId>
      <artifactId>awaitility</artifactId>
      <scope>test</scope>
    </dependency>


    <!-- architecture tests -->
    <dependency>
      <groupId>com.tngtech.archunit</groupId>
      <artifactId>archunit-junit5</artifactId>
      <version>${archunit.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
      </testResource>
    </testResources>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin.version}</version>
      </plugin>
      <plugin>
        <groupId>io.github.git-commit-id</groupId>
        <artifactId>git-commit-id-maven-plugin</artifactId>
        <version>${git-commit-id.version}</version>
        <configuration>
          <failOnNoGitDirectory>false</failOnNoGitDirectory>
          <generateGitPropertiesFile>true</generateGitPropertiesFile>
          <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>
          <commitIdGenerationMode>full</commitIdGenerationMode>
          <!--  human-readable part of the version number -->
          <dateFormat>yyyyMMdd-HHmmss</dateFormat>
        </configuration>
        <executions>
          <execution>
            <id>get-the-git-infos</id>
            <goals>
              <goal>revision</goal>
            </goals>
            <phase>initialize</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-gpg-plugin</artifactId>
        <version>${maven-gpg-plugin.version}</version>
        <executions>
          <execution>
            <id>sign-artifacts</id>
            <phase>package</phase>
            <goals>
              <goal>sign</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${maven-failsafe-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <!--skip deploy -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>${maven-deploy-plugin.version}</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <!--skip install -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-install-plugin</artifactId>
        <version>${maven-install-plugin.version}</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <classifier>dist</classifier>
          <excludes>
            <exclude>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-configuration-processor</artifactId>
            </exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>build-info</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>${maven-dependency-plugin.version}</version>
        <executions>
          <execution>
            <id>fetch-elastic-apm-agent</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>co.elastic.apm</groupId>
                  <artifactId>elastic-apm-agent</artifactId>
                  <version>${elastic-apm-agent.version}</version>
                  <outputDirectory>${project.build.directory}/libs</outputDirectory>
                  <destFileName>elastic-apm-agent.jar</destFileName>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.google.cloud.tools</groupId>
        <artifactId>jib-maven-plugin</artifactId>
        <version>${jib.maven-plugin-version}</version>
        <configuration>
          <from>
            <image>azul/zulu-openjdk-alpine:17@sha256:c310f0e52d6c7880bc62b5d7971e56c33bb5f9b4d2a370a09661d627cbf0402f</image>
            <platforms>
              <platform>
                <architecture>amd64</architecture>
                <os>linux</os>
              </platform>
              <platform>
                <architecture>arm64</architecture>
                <os>linux</os>
              </platform>
            </platforms>
          </from>
          <to>
            <image>yggdrasill.tld/${project.artifactId}:latest</image>
            <tags>
              <tag>${project.version}</tag>
              <tag>latest</tag>
            </tags>
          </to>
          <container>
            <creationTime>USE_CURRENT_TIMESTAMP</creationTime>
            <mainClass>${exec.mainClass}</mainClass>
            <jvmFlags>
              <jvmFlag>-javaagent:${elastic-apm-agent.lib}/elastic-apm-agent.jar</jvmFlag>
              <jvmFlag>-Delastic.apm.service_name=${project.name}</jvmFlag>
              <jvmFlag>-Djava.security.egd=file:/dev/./urandom</jvmFlag>
            </jvmFlags>
            <labels>
              <org.opencontainers.image.title>${project.name}</org.opencontainers.image.title>
              <org.opencontainers.image.description>${project.description}</org.opencontainers.image.description>
              <org.opencontainers.image.name>${project.artifactId}</org.opencontainers.image.name>
              <org.opencontainers.image.version>${project.version}</org.opencontainers.image.version>
              <org.opencontainers.image.created>${maven.build.timestamp}</org.opencontainers.image.created>
              <!--suppress UnresolvedMavenProperty -->
              <org.opencontainers.image.revision>${git.commit.id.abbrev}</org.opencontainers.image.revision>
            </labels>
          </container>
          <extraDirectories>
            <paths>
              <path>src/main/jib</path>
              <path>
                <from>${project.build.directory}/libs</from>
                <into>${elastic-apm-agent.lib}</into>
              </path>
            </paths>
          </extraDirectories>
        </configuration>
        <executions>
          <execution>
            <id>build-image</id>
            <phase>package</phase>
            <goals>
              <goal>build</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
